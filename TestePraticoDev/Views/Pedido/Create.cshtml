@model TestePraticoDev.ViewModels.PedidoViewModel

@{
    Layout = "_Layout";
}

<head>

    <title>
        Criar Pedido
    </title>

</head>

<body>
    <div>
        <h3> Criar um novo Pedido </h3>
    </div>

    @using (Html.BeginForm("Create", "Pedido", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group row">
                @Html.LabelFor(model => model.NomeCliente, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NomeCliente, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NomeCliente, "", new { @class = "text-danger" })
                </div>
            </div>
            <br>
            <div class="form-group row">
                @Html.LabelFor(model => model.Data, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Data, new { htmlAttributes = new { @class = "form-control", @placeholder = "dd/MM/yyyy", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Data, "", new { @class = "text-danger" })
                </div>
            </div>
            <br>
            <div class="form-group row">
                @Html.LabelFor(model => model.ValorTotal, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ValorTotal, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.ValorTotal, "", new { @class = "text-danger" })
                </div>
            </div>
            <br>
            <div class="form-group row">
                @Html.LabelFor(model => model.QuantidadeItens, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    <div class="input-group">
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-default" onclick="decrementarQuantidade()">-</button>
                        </span>
                        @Html.EditorFor(model => model.QuantidadeItens, new { htmlAttributes = new { @class = "form-control text-center", @readonly = "readonly" } })
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-default" onclick="incrementarQuantidade()">+</button>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.QuantidadeItens, "", new { @class = "text-danger" })
                </div>
            </div>
            <br>
            <div class="form-group row">
                <div class="col-md-offset-2 col-md-2" style="margin-left: 1200px">
                    <button type="submit" onclick="location.href='@Url.Action("Create", "Pedido")'" class="btn btn-success"> Salvar </button>
                </div>
                <div class="col-md-offset-2 col-md-2">
                    @Html.ActionLink("Voltar a página principal", "Index")
                </div>
            </div>
        </div>
    }
</body>

@*<script>
    // Funções para incrementar e decrementar a quantidade
    function incrementarQuantidade() {
        var quantidade = parseInt($('#QuantidadeItens').val());
        $('#QuantidadeItens').val(quantidade + 1);
        console.log($('#ValorTotal').val())
        var valorPorItem = 500;
        var valorAtual = $('#ValorTotal').val();
        if (quantidade > 0) {
            $('#ValorTotal').val(valorAtual + valorPorItem);
        }

    }

    function decrementarQuantidade() {
        var quantidade = parseInt($('#QuantidadeItens').val());
        if (quantidade > 1) {
            $('#QuantidadeItens').val(quantidade - 1);

        }
    }


</script>*@

<script>
    // Função para incrementar a quantidade e atualizar o ValorTotal
    function incrementarQuantidade() {
        var quantidade = parseInt($('#QuantidadeItens').val());
        var valorPorItem = 500;
        $('#QuantidadeItens').val(quantidade + 1);
        var novoValorTotal = (quantidade + 1) * valorPorItem;
        $('#ValorTotal').val(formatarValor(novoValorTotal)); // Define 2 casas decimais para o valor
    }

    // Função para decrementar a quantidade e atualizar o ValorTotal
    function decrementarQuantidade() {
        var quantidade = parseInt($('#QuantidadeItens').val());
        if (quantidade > 1) {
            var valorPorItem = 500;
            $('#QuantidadeItens').val(quantidade - 1);
            var novoValorTotal = (quantidade - 1) * valorPorItem;
            $('#ValorTotal').val(formatarValor(novoValorTotal)); // Define 2 casas decimais para o valor
        }
    }

    function formatarValor(valor) {
        var valorFormatado = valor.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        return valorFormatado;
    }
</script>